# Simple GitLab CI/CD Pipeline
# .gitlab-ci.yml

stages:
  - test
  - build
  - deploy

# Test Frontend
test_frontend:
  stage: test
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run test -- --watch=false --browsers=ChromeHeadless

# Test Backend
test_backend:
  stage: test
  image: node:18
  script:
    - cd backend
    - npm install
    - npm test

# Build Frontend
build_frontend:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/

# Build Backend
build_backend:
  stage: build
  image: node:18
  script:
    - cd backend
    - npm install
    - npm run build
  artifacts:
    paths:
      - backend/dist/

# Deploy to Server
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
  script:
    # Upload frontend
    - rsync -avz --delete frontend/dist/ $SERVER_USER@$SERVER_IP:/var/www/html/
    # Upload backend
    - rsync -avz --delete backend/ $SERVER_USER@$SERVER_IP:/opt/backend/
    # Restart backend service
    - ssh $SERVER_USER@$SERVER_IP "cd /opt/backend && npm install --production && pm2 restart app"
  only:
    - main

---

# Alternative: GitHub Actions
# .github/workflows/deploy.yml

name: Deploy App

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Frontend
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
      
      # Backend
      - name: Test Backend
        run: |
          cd backend
          npm install
          npm test
      
      # Deploy
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Update frontend
            rsync -avz --delete /tmp/frontend/dist/ /var/www/html/
            # Update backend
            cd /opt/backend
            git pull origin main
            npm install --production
            pm2 restart app

---

# Simple Dockerfile for Frontend
# frontend/Dockerfile

FROM nginx:alpine
COPY dist/ /usr/share/nginx/html/
EXPOSE 80

---

# Simple Dockerfile for Backend  
# backend/Dockerfile

FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]

---

# Required Environment Variables:
# - SSH_PRIVATE_KEY: Your server SSH key
# - SERVER_IP: Your server IP address  
# - SERVER_USER: SSH username (e.g., ubuntu, root)